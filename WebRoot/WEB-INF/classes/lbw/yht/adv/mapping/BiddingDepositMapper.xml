<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="lbw.yht.adv.dao.IBiddingDepositDao">

	<resultMap type="lbw.yht.adv.domain.BiddingDeposit" id="BiddingDepositMap">
		<id column="deposit_id" property="depositId" />
		<result column="member_id" property="memberId" />
		<result column="member_name" property="memberName" />
		<result column="member_no" property="memberNo" />
		<result column="glide_number" property="glideNumber" />
		<result column="deposit_price" property="depositPrice" />
		<result column="is_return" property="isReturn" />
	</resultMap>

	<select id="queryAllpageList" parameterType="lbw.yht.adv.domain.param.BiddingDepositParam"
		resultMap="BiddingDepositMap">
		select
		deposit_id,
		member_id,
		member_name,
		member_no,
		glide_number,
		deposit_price,
		is_return
		from bidding_deposit where 1=1
		<if test="memberName != null and memberName != ''">
			and member_name like '%${memberName}%'
		</if>
		<if test="isReturn != null ">
			and is_return =#{isReturn}
		</if>
		<if test="pagination.sort != null or pagination.order != null">
			order by ${pagination.sort} ${pagination.order}
		</if>
		limit #{pagination.page},#{pagination.rows}
	</select>

	<select id="queryCount" parameterType="lbw.yht.adv.domain.param.BiddingDepositParam"
		resultType="int">
		select count(*)
		from bidding_deposit where 1=1
		<if test="memberName != null and memberName != ''">
			and member_name like '%${memberName}%'
		</if>
		<if test="isReturn != null">
			and is_return =#{isReturn}
		</if>
	</select>


	<select id="findOneByMemberId" parameterType="Map" resultMap="BiddingDepositMap">
		select
		deposit_id,
		member_id,
		member_name,
		member_no,
		glide_number,
		deposit_price,
		is_return
		from bidding_deposit where is_return =0 and
		member_id=#{memberId}
	</select>


	<insert id="addBiddingdeposit" parameterType="Map">
		insert into
		bidding_deposit(
		member_id,
		member_name,
		member_no,
		glide_number,
		deposit_price,
		is_return
		) values(
		#{memberId},
		#{memberName},
		#{memberNo},
		#{glideNumber},
		#{depositPrice},
		0)
	</insert>


	<update id="updateOneByMemberId" parameterType="String">
		update
		bidding_deposit set is_return=1 where member_id=#{memberId}
	</update>

	<update id="modifyDeposit" parameterType="String">
		update
		bidding_deposit
		set is_return=2 where deposit_id=#{depositId}
	</update>


</mapper>